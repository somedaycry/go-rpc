// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: proto/pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamGrpcClient is the client API for StreamGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGrpcClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (StreamGrpc_ChannelClient, error)
}

type streamGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGrpcClient(cc grpc.ClientConnInterface) StreamGrpcClient {
	return &streamGrpcClient{cc}
}

func (c *streamGrpcClient) Channel(ctx context.Context, opts ...grpc.CallOption) (StreamGrpc_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamGrpc_ServiceDesc.Streams[0], "/pb.StreamGrpc/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGrpcChannelClient{stream}
	return x, nil
}

type StreamGrpc_ChannelClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type streamGrpcChannelClient struct {
	grpc.ClientStream
}

func (x *streamGrpcChannelClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamGrpcChannelClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamGrpcServer is the server API for StreamGrpc service.
// All implementations must embed UnimplementedStreamGrpcServer
// for forward compatibility
type StreamGrpcServer interface {
	Channel(StreamGrpc_ChannelServer) error
	mustEmbedUnimplementedStreamGrpcServer()
}

// UnimplementedStreamGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGrpcServer struct {
}

func (UnimplementedStreamGrpcServer) Channel(StreamGrpc_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedStreamGrpcServer) mustEmbedUnimplementedStreamGrpcServer() {}

// UnsafeStreamGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGrpcServer will
// result in compilation errors.
type UnsafeStreamGrpcServer interface {
	mustEmbedUnimplementedStreamGrpcServer()
}

func RegisterStreamGrpcServer(s grpc.ServiceRegistrar, srv StreamGrpcServer) {
	s.RegisterService(&StreamGrpc_ServiceDesc, srv)
}

func _StreamGrpc_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamGrpcServer).Channel(&streamGrpcChannelServer{stream})
}

type StreamGrpc_ChannelServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type streamGrpcChannelServer struct {
	grpc.ServerStream
}

func (x *streamGrpcChannelServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamGrpcChannelServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamGrpc_ServiceDesc is the grpc.ServiceDesc for StreamGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StreamGrpc",
	HandlerType: (*StreamGrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _StreamGrpc_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pb.proto",
}
